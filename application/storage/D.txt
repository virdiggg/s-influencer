<div class="modal fade" id="approveRequestModal" tabindex="-1" role="dialog" aria-labelledby="approveRequestModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <form id="form-request" class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="approveRequestModalLabel"></h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="name">Name</label>
                    <input type="text" class="form-control" placeholder="Name" name="name" id="name" readonly />
                    <input type="hidden" name="id" id="row_id" required />
                    <input type="hidden" name="type_action" id="type_action" required />
                </div>
                <div class="form-group">
                    <label for="username_instagram">Username Instagram</label>
                    <input type="text" class="form-control" placeholder="Username Instagram" name="username_instagram" id="username_instagram" readonly />
                </div>
                <div class="form-group">
                    <label for="followers">Followers</label>
                    <input type="text" class="form-control" placeholder="Followers" name="followers" id="followers" readonly />
                </div>
                <div class="form-group">
                    <label for="engagement_rate">Engagement Rate</label>
                    <input type="text" class="form-control" placeholder="Engagement Rate" name="engagement_rate" id="engagement_rate" readonly />
                </div>
                <div class="form-group">
                    <label for="note">Note</label>
                    <textarea class="form-control" rows="3" placeholder="Note" name="note" id="note" readonly></textarea>
                </div>
                <div class="form-group" id="reject-row"></div>
                <div class="text-danger" id="message"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn border-secondary" data-dismiss="modal">Close</button>
                <button type="submit" class="btn btn-success" id="btn-approve">Approve</button>
            </div>
        </form>
    </div>
</div>
<script type="text/javascript">
    openApprove = (e, id) => {
        const usernameInstagram = e.dataset.username_instagram;
        const followers = e.dataset.followers;
        const engagementRate = e.dataset.engagement_rate;
        const name = e.dataset.name;
        const note = e.dataset.note;

        document.getElementById('row_id').value = id;
        document.getElementById('username_instagram').value = usernameInstagram;
        document.getElementById('followers').value = followers;
        document.getElementById('engagement_rate').value = engagementRate;
        document.getElementById('name').value = name;
        document.getElementById('note').value = note;
        document.getElementById('type_action').value = 'approve';
        document.getElementById('approveRequestModalLabel').textContent ='Approve Influencer Request';
        document.getElementById('reject-row').innerHTML = '';

        $('#approveRequestModal').modal('show');
    }

    document.getElementById('form-request').addEventListener('submit', function(e) {
        e.preventDefault();

        let typeAction = document.getElementById('type_action').value;
        let btn = document.getElementById('btn-approve');
        let message = document.getElementById('message');
        message.innerHTML = '';
        btn.disabled = true;

        fetch(initURL + 'api/influencer/' + typeAction, {
                method: 'POST',
                body: new FormData(this)
            })
            .then(response => response.json())
            .then(response => {
                if (response.status === false) {
                    message.innerHTML = `<label class="text-danger">${response.message}</label>`;
                } else {
                    $('#approveRequestModal').modal('hide');
                    showToast(response.message);
                    dataTable.draw();
                }
            })
            .catch(error => {
                message.innerHTML = `<label class="text-danger">${error.message}</label>`;
            })
            .finally(() => {
                btn.disabled = false;
            });
    });
</script>

public function reject() {
    if (!$this->authenticated->isAuthenticated()) {
        http_response_code(401);
        echo json_encode([
            'status' => FALSE,
            'statusCode' => 401,
            'message' => 'Unauthorized',
        ]);
        return;
    }

    // Input hidden, dinamain ID aja karena gak perlu tampilin error
    $this->form_validation->set_rules('id', 'ID', 'required|trim');
    $this->form_validation->set_rules('reject_note', 'Reason', 'required|trim');

    if ($this->form_validation->run() === FALSE) {
        http_response_code(422);
        echo json_encode([
            'status' => FALSE,
            'statusCode' => 422,
            'message' => validation_errors(),
        ]);
        return;
    }

    $this->load->model('M_Influencer_request', 'ir', TRUE);

    $id = sanitizeString($this->input->post('id'));
    $note = sanitizeString($this->input->post('reject_note'));
    $result = $this->ir->reject($id, $note);

    if (!$result) {
        http_response_code(500);
        echo json_encode([
            'status' => FALSE,
            'statusCode' => 500,
            'message' => 'Failed to reject the request',
        ]);
        return;
    }

    http_response_code(201);
    echo json_encode([
        'status' => TRUE,
        'statusCode' => 201,
        'message' => 'Request has been rejected',
    ]);
    return;
}

public function reject($id, $reason) {
    return $this->update($id, [
        'rejected_by' => getSession('username'),
        'rejected_at' => date("Y-m-d H:i:s"),
        'reject_note' => $reason,
    ]);
}

public function update($id, $param) {
    if (count($param) === 0) {
        return null;
    }

    $param = array_merge($param, [
        "updated_at" => date("Y-m-d H:i:s"),
        "updated_by" => getSession("username"),
    ]);
    $this->db->where('id', $id);
    $this->db->update($this->table, $param);
    return (bool) $this->db->affected_rows();
}
